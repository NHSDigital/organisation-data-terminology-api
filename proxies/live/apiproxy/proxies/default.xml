<ProxyEndpoint name="default">
  <PreFlow>
    <Request>
      <Step>
        <Name>FlowCallout.GetEnvironmentKeyValueMapData</Name>
      </Step>
<!--      <Step>
        <Name>OauthV2.VerifyAccessTokenAppLevel3OrCis2Aal3</Name>
      </Step>-->
      <Step>
        <Name>FlowCallout.ApplyRateLimiting</Name>
      </Step>
      <Step>
        <Name>AssignMessage.RemoveAuthHeaders</Name>
      </Step>
      <Step>
        <Name>AssignMessage.AddProxyPathHeaderOrig</Name>
      </Step>
      <Step>
        <Condition>(request.header.X-Proxy-Path =| "/fhir/CodeSystem") or (request.header.X-Proxy-Path =| "/fhir/ValueSet") or (request.header.X-Proxy-Path =| "/fhir/ConceptMap") or (request.header.X-Proxy-Path =| "/fhir/StructureDefinition")</Condition>
        <Name>AssignMessage.AddProxyPathHeader</Name>
      </Step>
      <Step>
        <Name>ExtractVariables.RequestHostHeader</Name>
      </Step>
    </Request>
  </PreFlow>

  <Flows>
    <Flow name="OptionsPreFlight">
      <Request/>
      <Response>
        <Step>
          <Name>AssignMessage.AddCors</Name>
        </Step>
      </Response>
      <Condition>(request.verb = "OPTIONS") and (request.header.origin != null) and (request.header.Access-Control-Request-Method != null)</Condition>
    </Flow>
    <Flow name="AddPayloadToPing">
      <Description/>
      <Request/>
      <Response>
        <Step>
          <Name>AssignMessage.AddPayloadToPing</Name>
        </Step>
      </Response>
      <Condition>(proxy.pathsuffix MatchesPath "/_ping") and ((request.verb = "GET") or (request.verb = "HEAD"))</Condition>
    </Flow>
    <Flow name="StatusEndpoint">
      <Request>
        <Step>
          <Name>ServiceCallout.CallHealthcheckEndpoint</Name>
        </Step>
      </Request>
      <Response>
        <Step>
          <Name>javascript.SetStatusResponse</Name>
        </Step>
      </Response>
      <Condition>(proxy.pathsuffix MatchesPath "/_status") and ((request.verb = "GET") or (request.verb = "HEAD"))
      </Condition>
    </Flow>
  </Flows>
  <PostFlow>
    <Request>
      <Step>
        <Name>LookupCache.GetAccessToken</Name>
      </Step>
      <Step>
        <Condition>lookupcache.LookupCache.GetAccessToken.cachehit = false</Condition>
        <Name>ServiceCallout.GetAccessToken</Name>
      </Step>
      <Step>
        <Condition>lookupcache.LookupCache.GetAccessToken.cachehit = false and accessTokenResponse.content != null</Condition>
        <Name>ExtractVariables.AccessToken</Name>
      </Step>
      <Step>
        <Condition>lookupcache.LookupCache.GetAccessToken.cachehit = false</Condition>
        <Name>PopulateCache.AccessToken</Name>
      </Step>
    </Request>
    <Response>
      <Step>
        <Name>AssignMessage.ReplacePagingUrl</Name>
      </Step>
    </Response>
  </PostFlow>
  
  <PostClientFlow name="PostClientFlow">
    <Response>
      <Step>
        <Name>FlowCallout.LogToSplunk</Name>
      </Step>
    </Response>
  </PostClientFlow>
  <HTTPProxyConnection>
    <BasePath>{{ SERVICE_BASE_PATH }}</BasePath>
    <VirtualHost>secure</VirtualHost>
  </HTTPProxyConnection>
  <RouteRule name="NoRoute">
    <Condition>(request.verb = "OPTIONS") and (request.header.origin != null) and (request.header.Access-Control-Request-Method != null)</Condition>
  </RouteRule>
  <RouteRule name="NoRoutePing">
    <Condition>(proxy.pathsuffix MatchesPath "/_ping") and ((request.verb = "GET") or (request.verb = "HEAD"))</Condition>
  </RouteRule>
  <RouteRule name="NoRouteStatus">
    <Condition>(proxy.pathsuffix MatchesPath "/_status") and ((request.verb = "GET") or (request.verb = "HEAD"))</Condition>
  </RouteRule>
  <RouteRule name="organisation-data-terminology-api-target">
    <TargetEndpoint>organisation-data-terminology-api-target</TargetEndpoint>
  </RouteRule>
  <FaultRules>
    <FaultRule name="access_token_expired">
      <Step>
        <Name>ExtractVariables.OAuthErrorFaultString</Name>
      </Step>
      <Step>
        <Name>AssignMessage.OAuthPolicyErrorResponse</Name>
      </Step>
      <Condition>oauthV2.OauthV2.VerifyAccessToken.failed</Condition>
    </FaultRule>
  </FaultRules>
  <DefaultFaultRule>
    <Step>
      <Name>AssignMessage.Errors.CatchAllMessage</Name>
    </Step>
  </DefaultFaultRule>
</ProxyEndpoint>
